// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image.proto

#include "image.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace SendImage {
class GetImageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetImageRequest> _instance;
} _GetImageRequest_default_instance_;
class GetImageReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetImageReply> _instance;
} _GetImageReply_default_instance_;
}  // namespace SendImage
static void InitDefaultsscc_info_GetImageReply_image_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SendImage::_GetImageReply_default_instance_;
    new (ptr) ::SendImage::GetImageReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SendImage::GetImageReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetImageReply_image_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetImageReply_image_2eproto}, {}};

static void InitDefaultsscc_info_GetImageRequest_image_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SendImage::_GetImageRequest_default_instance_;
    new (ptr) ::SendImage::GetImageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SendImage::GetImageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetImageRequest_image_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetImageRequest_image_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_image_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_image_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_image_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_image_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SendImage::GetImageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SendImage::GetImageRequest, cameraid_),
  PROTOBUF_FIELD_OFFSET(::SendImage::GetImageRequest, lastindex_),
  PROTOBUF_FIELD_OFFSET(::SendImage::GetImageRequest, request_time_),
  PROTOBUF_FIELD_OFFSET(::SendImage::GetImageRequest, responsetype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SendImage::GetImageReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SendImage::GetImageReply, succeed_),
  PROTOBUF_FIELD_OFFSET(::SendImage::GetImageReply, cameraid_),
  PROTOBUF_FIELD_OFFSET(::SendImage::GetImageReply, index_),
  PROTOBUF_FIELD_OFFSET(::SendImage::GetImageReply, response_time_),
  PROTOBUF_FIELD_OFFSET(::SendImage::GetImageReply, picture_),
  PROTOBUF_FIELD_OFFSET(::SendImage::GetImageReply, rows_),
  PROTOBUF_FIELD_OFFSET(::SendImage::GetImageReply, cols_),
  PROTOBUF_FIELD_OFFSET(::SendImage::GetImageReply, size_),
  PROTOBUF_FIELD_OFFSET(::SendImage::GetImageReply, refer_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SendImage::GetImageRequest)},
  { 9, -1, sizeof(::SendImage::GetImageReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SendImage::_GetImageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SendImage::_GetImageReply_default_instance_),
};

const char descriptor_table_protodef_image_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013image.proto\022\tSendImage\"\241\001\n\017GetImageReq"
  "uest\022\020\n\010cameraid\030\001 \001(\t\022\021\n\tlastindex\030\002 \001("
  "\t\022\024\n\014request_time\030\003 \001(\004\0225\n\014responsetype\030"
  "\004 \001(\0162\037.SendImage.GetImageRequest.type\"\034"
  "\n\004type\022\t\n\005async\020\000\022\t\n\005block\020\001\"\242\001\n\rGetImag"
  "eReply\022\017\n\007succeed\030\001 \001(\010\022\020\n\010cameraid\030\002 \001("
  "\t\022\r\n\005index\030\003 \001(\t\022\025\n\rresponse_time\030\004 \001(\004\022"
  "\017\n\007picture\030\005 \001(\014\022\014\n\004rows\030\006 \001(\005\022\014\n\004cols\030\007"
  " \001(\005\022\014\n\004size\030\010 \001(\003\022\r\n\005refer\030\t \001(\t2Q\n\013Ima"
  "geServer\022B\n\010GetImage\022\032.SendImage.GetImag"
  "eRequest\032\030.SendImage.GetImageReply\"\000b\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_image_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_image_2eproto_sccs[2] = {
  &scc_info_GetImageReply_image_2eproto.base,
  &scc_info_GetImageRequest_image_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_image_2eproto_once;
static bool descriptor_table_image_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_image_2eproto = {
  &descriptor_table_image_2eproto_initialized, descriptor_table_protodef_image_2eproto, "image.proto", 444,
  &descriptor_table_image_2eproto_once, descriptor_table_image_2eproto_sccs, descriptor_table_image_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_image_2eproto::offsets,
  file_level_metadata_image_2eproto, 2, file_level_enum_descriptors_image_2eproto, file_level_service_descriptors_image_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_image_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_image_2eproto), true);
namespace SendImage {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetImageRequest_type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_image_2eproto);
  return file_level_enum_descriptors_image_2eproto[0];
}
bool GetImageRequest_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GetImageRequest_type GetImageRequest::async;
constexpr GetImageRequest_type GetImageRequest::block;
constexpr GetImageRequest_type GetImageRequest::type_MIN;
constexpr GetImageRequest_type GetImageRequest::type_MAX;
constexpr int GetImageRequest::type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void GetImageRequest::InitAsDefaultInstance() {
}
class GetImageRequest::_Internal {
 public:
};

GetImageRequest::GetImageRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SendImage.GetImageRequest)
}
GetImageRequest::GetImageRequest(const GetImageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cameraid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cameraid().empty()) {
    cameraid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cameraid_);
  }
  lastindex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lastindex().empty()) {
    lastindex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lastindex_);
  }
  ::memcpy(&request_time_, &from.request_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&responsetype_) -
    reinterpret_cast<char*>(&request_time_)) + sizeof(responsetype_));
  // @@protoc_insertion_point(copy_constructor:SendImage.GetImageRequest)
}

void GetImageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetImageRequest_image_2eproto.base);
  cameraid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lastindex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&responsetype_) -
      reinterpret_cast<char*>(&request_time_)) + sizeof(responsetype_));
}

GetImageRequest::~GetImageRequest() {
  // @@protoc_insertion_point(destructor:SendImage.GetImageRequest)
  SharedDtor();
}

void GetImageRequest::SharedDtor() {
  cameraid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lastindex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetImageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetImageRequest& GetImageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetImageRequest_image_2eproto.base);
  return *internal_default_instance();
}


void GetImageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SendImage.GetImageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cameraid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lastindex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&responsetype_) -
      reinterpret_cast<char*>(&request_time_)) + sizeof(responsetype_));
  _internal_metadata_.Clear();
}

const char* GetImageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string cameraid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_cameraid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SendImage.GetImageRequest.cameraid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lastindex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_lastindex();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SendImage.GetImageRequest.lastindex"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 request_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          request_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SendImage.GetImageRequest.type responsetype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_responsetype(static_cast<::SendImage::GetImageRequest_type>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetImageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SendImage.GetImageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cameraid = 1;
  if (this->cameraid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cameraid().data(), static_cast<int>(this->_internal_cameraid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SendImage.GetImageRequest.cameraid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cameraid(), target);
  }

  // string lastindex = 2;
  if (this->lastindex().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lastindex().data(), static_cast<int>(this->_internal_lastindex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SendImage.GetImageRequest.lastindex");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_lastindex(), target);
  }

  // uint64 request_time = 3;
  if (this->request_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_request_time(), target);
  }

  // .SendImage.GetImageRequest.type responsetype = 4;
  if (this->responsetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_responsetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SendImage.GetImageRequest)
  return target;
}

size_t GetImageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SendImage.GetImageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cameraid = 1;
  if (this->cameraid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cameraid());
  }

  // string lastindex = 2;
  if (this->lastindex().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lastindex());
  }

  // uint64 request_time = 3;
  if (this->request_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_request_time());
  }

  // .SendImage.GetImageRequest.type responsetype = 4;
  if (this->responsetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_responsetype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetImageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SendImage.GetImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetImageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetImageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SendImage.GetImageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SendImage.GetImageRequest)
    MergeFrom(*source);
  }
}

void GetImageRequest::MergeFrom(const GetImageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SendImage.GetImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cameraid().size() > 0) {

    cameraid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cameraid_);
  }
  if (from.lastindex().size() > 0) {

    lastindex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lastindex_);
  }
  if (from.request_time() != 0) {
    _internal_set_request_time(from._internal_request_time());
  }
  if (from.responsetype() != 0) {
    _internal_set_responsetype(from._internal_responsetype());
  }
}

void GetImageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SendImage.GetImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetImageRequest::CopyFrom(const GetImageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SendImage.GetImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetImageRequest::IsInitialized() const {
  return true;
}

void GetImageRequest::InternalSwap(GetImageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cameraid_.Swap(&other->cameraid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lastindex_.Swap(&other->lastindex_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(request_time_, other->request_time_);
  swap(responsetype_, other->responsetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetImageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetImageReply::InitAsDefaultInstance() {
}
class GetImageReply::_Internal {
 public:
};

GetImageReply::GetImageReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SendImage.GetImageReply)
}
GetImageReply::GetImageReply(const GetImageReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cameraid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cameraid().empty()) {
    cameraid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cameraid_);
  }
  index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_index().empty()) {
    index_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.index_);
  }
  picture_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_picture().empty()) {
    picture_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.picture_);
  }
  refer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_refer().empty()) {
    refer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.refer_);
  }
  ::memcpy(&succeed_, &from.succeed_,
    static_cast<size_t>(reinterpret_cast<char*>(&cols_) -
    reinterpret_cast<char*>(&succeed_)) + sizeof(cols_));
  // @@protoc_insertion_point(copy_constructor:SendImage.GetImageReply)
}

void GetImageReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetImageReply_image_2eproto.base);
  cameraid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  picture_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  refer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&succeed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cols_) -
      reinterpret_cast<char*>(&succeed_)) + sizeof(cols_));
}

GetImageReply::~GetImageReply() {
  // @@protoc_insertion_point(destructor:SendImage.GetImageReply)
  SharedDtor();
}

void GetImageReply::SharedDtor() {
  cameraid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  picture_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  refer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetImageReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetImageReply& GetImageReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetImageReply_image_2eproto.base);
  return *internal_default_instance();
}


void GetImageReply::Clear() {
// @@protoc_insertion_point(message_clear_start:SendImage.GetImageReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cameraid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  picture_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  refer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&succeed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cols_) -
      reinterpret_cast<char*>(&succeed_)) + sizeof(cols_));
  _internal_metadata_.Clear();
}

const char* GetImageReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool succeed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          succeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cameraid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cameraid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SendImage.GetImageReply.cameraid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_index();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SendImage.GetImageReply.index"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 response_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          response_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes picture = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_picture();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rows = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cols = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          cols_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string refer = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_refer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SendImage.GetImageReply.refer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetImageReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SendImage.GetImageReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool succeed = 1;
  if (this->succeed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_succeed(), target);
  }

  // string cameraid = 2;
  if (this->cameraid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cameraid().data(), static_cast<int>(this->_internal_cameraid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SendImage.GetImageReply.cameraid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cameraid(), target);
  }

  // string index = 3;
  if (this->index().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index().data(), static_cast<int>(this->_internal_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SendImage.GetImageReply.index");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_index(), target);
  }

  // uint64 response_time = 4;
  if (this->response_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_response_time(), target);
  }

  // bytes picture = 5;
  if (this->picture().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_picture(), target);
  }

  // int32 rows = 6;
  if (this->rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_rows(), target);
  }

  // int32 cols = 7;
  if (this->cols() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_cols(), target);
  }

  // int64 size = 8;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_size(), target);
  }

  // string refer = 9;
  if (this->refer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_refer().data(), static_cast<int>(this->_internal_refer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SendImage.GetImageReply.refer");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_refer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SendImage.GetImageReply)
  return target;
}

size_t GetImageReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SendImage.GetImageReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cameraid = 2;
  if (this->cameraid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cameraid());
  }

  // string index = 3;
  if (this->index().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index());
  }

  // bytes picture = 5;
  if (this->picture().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_picture());
  }

  // string refer = 9;
  if (this->refer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_refer());
  }

  // bool succeed = 1;
  if (this->succeed() != 0) {
    total_size += 1 + 1;
  }

  // int32 rows = 6;
  if (this->rows() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rows());
  }

  // uint64 response_time = 4;
  if (this->response_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_response_time());
  }

  // int64 size = 8;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_size());
  }

  // int32 cols = 7;
  if (this->cols() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cols());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetImageReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SendImage.GetImageReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetImageReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetImageReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SendImage.GetImageReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SendImage.GetImageReply)
    MergeFrom(*source);
  }
}

void GetImageReply::MergeFrom(const GetImageReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SendImage.GetImageReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cameraid().size() > 0) {

    cameraid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cameraid_);
  }
  if (from.index().size() > 0) {

    index_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.index_);
  }
  if (from.picture().size() > 0) {

    picture_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.picture_);
  }
  if (from.refer().size() > 0) {

    refer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.refer_);
  }
  if (from.succeed() != 0) {
    _internal_set_succeed(from._internal_succeed());
  }
  if (from.rows() != 0) {
    _internal_set_rows(from._internal_rows());
  }
  if (from.response_time() != 0) {
    _internal_set_response_time(from._internal_response_time());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.cols() != 0) {
    _internal_set_cols(from._internal_cols());
  }
}

void GetImageReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SendImage.GetImageReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetImageReply::CopyFrom(const GetImageReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SendImage.GetImageReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetImageReply::IsInitialized() const {
  return true;
}

void GetImageReply::InternalSwap(GetImageReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cameraid_.Swap(&other->cameraid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  index_.Swap(&other->index_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  picture_.Swap(&other->picture_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  refer_.Swap(&other->refer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(succeed_, other->succeed_);
  swap(rows_, other->rows_);
  swap(response_time_, other->response_time_);
  swap(size_, other->size_);
  swap(cols_, other->cols_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetImageReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SendImage
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SendImage::GetImageRequest* Arena::CreateMaybeMessage< ::SendImage::GetImageRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SendImage::GetImageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SendImage::GetImageReply* Arena::CreateMaybeMessage< ::SendImage::GetImageReply >(Arena* arena) {
  return Arena::CreateInternal< ::SendImage::GetImageReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
