// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_image_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_image_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_image_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_image_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_image_2eproto;
namespace SendImage {
class GetImageReply;
class GetImageReplyDefaultTypeInternal;
extern GetImageReplyDefaultTypeInternal _GetImageReply_default_instance_;
class GetImageRequest;
class GetImageRequestDefaultTypeInternal;
extern GetImageRequestDefaultTypeInternal _GetImageRequest_default_instance_;
}  // namespace SendImage
PROTOBUF_NAMESPACE_OPEN
template<> ::SendImage::GetImageReply* Arena::CreateMaybeMessage<::SendImage::GetImageReply>(Arena*);
template<> ::SendImage::GetImageRequest* Arena::CreateMaybeMessage<::SendImage::GetImageRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SendImage {

enum GetImageRequest_type : int {
  GetImageRequest_type_async = 0,
  GetImageRequest_type_block = 1,
  GetImageRequest_type_GetImageRequest_type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GetImageRequest_type_GetImageRequest_type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GetImageRequest_type_IsValid(int value);
constexpr GetImageRequest_type GetImageRequest_type_type_MIN = GetImageRequest_type_async;
constexpr GetImageRequest_type GetImageRequest_type_type_MAX = GetImageRequest_type_block;
constexpr int GetImageRequest_type_type_ARRAYSIZE = GetImageRequest_type_type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetImageRequest_type_descriptor();
template<typename T>
inline const std::string& GetImageRequest_type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GetImageRequest_type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GetImageRequest_type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GetImageRequest_type_descriptor(), enum_t_value);
}
inline bool GetImageRequest_type_Parse(
    const std::string& name, GetImageRequest_type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GetImageRequest_type>(
    GetImageRequest_type_descriptor(), name, value);
}
// ===================================================================

class GetImageRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SendImage.GetImageRequest) */ {
 public:
  GetImageRequest();
  virtual ~GetImageRequest();

  GetImageRequest(const GetImageRequest& from);
  GetImageRequest(GetImageRequest&& from) noexcept
    : GetImageRequest() {
    *this = ::std::move(from);
  }

  inline GetImageRequest& operator=(const GetImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetImageRequest& operator=(GetImageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetImageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetImageRequest* internal_default_instance() {
    return reinterpret_cast<const GetImageRequest*>(
               &_GetImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetImageRequest& a, GetImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetImageRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetImageRequest* New() const final {
    return CreateMaybeMessage<GetImageRequest>(nullptr);
  }

  GetImageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetImageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetImageRequest& from);
  void MergeFrom(const GetImageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetImageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SendImage.GetImageRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_image_2eproto);
    return ::descriptor_table_image_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetImageRequest_type type;
  static constexpr type async =
    GetImageRequest_type_async;
  static constexpr type block =
    GetImageRequest_type_block;
  static inline bool type_IsValid(int value) {
    return GetImageRequest_type_IsValid(value);
  }
  static constexpr type type_MIN =
    GetImageRequest_type_type_MIN;
  static constexpr type type_MAX =
    GetImageRequest_type_type_MAX;
  static constexpr int type_ARRAYSIZE =
    GetImageRequest_type_type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  type_descriptor() {
    return GetImageRequest_type_descriptor();
  }
  template<typename T>
  static inline const std::string& type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function type_Name.");
    return GetImageRequest_type_Name(enum_t_value);
  }
  static inline bool type_Parse(const std::string& name,
      type* value) {
    return GetImageRequest_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCameraidFieldNumber = 1,
    kLastindexFieldNumber = 2,
    kRequestTimeFieldNumber = 3,
    kResponsetypeFieldNumber = 4,
  };
  // string cameraid = 1;
  void clear_cameraid();
  const std::string& cameraid() const;
  void set_cameraid(const std::string& value);
  void set_cameraid(std::string&& value);
  void set_cameraid(const char* value);
  void set_cameraid(const char* value, size_t size);
  std::string* mutable_cameraid();
  std::string* release_cameraid();
  void set_allocated_cameraid(std::string* cameraid);
  private:
  const std::string& _internal_cameraid() const;
  void _internal_set_cameraid(const std::string& value);
  std::string* _internal_mutable_cameraid();
  public:

  // string lastindex = 2;
  void clear_lastindex();
  const std::string& lastindex() const;
  void set_lastindex(const std::string& value);
  void set_lastindex(std::string&& value);
  void set_lastindex(const char* value);
  void set_lastindex(const char* value, size_t size);
  std::string* mutable_lastindex();
  std::string* release_lastindex();
  void set_allocated_lastindex(std::string* lastindex);
  private:
  const std::string& _internal_lastindex() const;
  void _internal_set_lastindex(const std::string& value);
  std::string* _internal_mutable_lastindex();
  public:

  // uint64 request_time = 3;
  void clear_request_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 request_time() const;
  void set_request_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_request_time() const;
  void _internal_set_request_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .SendImage.GetImageRequest.type responsetype = 4;
  void clear_responsetype();
  ::SendImage::GetImageRequest_type responsetype() const;
  void set_responsetype(::SendImage::GetImageRequest_type value);
  private:
  ::SendImage::GetImageRequest_type _internal_responsetype() const;
  void _internal_set_responsetype(::SendImage::GetImageRequest_type value);
  public:

  // @@protoc_insertion_point(class_scope:SendImage.GetImageRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cameraid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lastindex_;
  ::PROTOBUF_NAMESPACE_ID::uint64 request_time_;
  int responsetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_image_2eproto;
};
// -------------------------------------------------------------------

class GetImageReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SendImage.GetImageReply) */ {
 public:
  GetImageReply();
  virtual ~GetImageReply();

  GetImageReply(const GetImageReply& from);
  GetImageReply(GetImageReply&& from) noexcept
    : GetImageReply() {
    *this = ::std::move(from);
  }

  inline GetImageReply& operator=(const GetImageReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetImageReply& operator=(GetImageReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetImageReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetImageReply* internal_default_instance() {
    return reinterpret_cast<const GetImageReply*>(
               &_GetImageReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetImageReply& a, GetImageReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetImageReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetImageReply* New() const final {
    return CreateMaybeMessage<GetImageReply>(nullptr);
  }

  GetImageReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetImageReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetImageReply& from);
  void MergeFrom(const GetImageReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetImageReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SendImage.GetImageReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_image_2eproto);
    return ::descriptor_table_image_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraidFieldNumber = 2,
    kIndexFieldNumber = 3,
    kPictureFieldNumber = 5,
    kReferFieldNumber = 9,
    kSucceedFieldNumber = 1,
    kRowsFieldNumber = 6,
    kResponseTimeFieldNumber = 4,
    kSizeFieldNumber = 8,
    kColsFieldNumber = 7,
  };
  // string cameraid = 2;
  void clear_cameraid();
  const std::string& cameraid() const;
  void set_cameraid(const std::string& value);
  void set_cameraid(std::string&& value);
  void set_cameraid(const char* value);
  void set_cameraid(const char* value, size_t size);
  std::string* mutable_cameraid();
  std::string* release_cameraid();
  void set_allocated_cameraid(std::string* cameraid);
  private:
  const std::string& _internal_cameraid() const;
  void _internal_set_cameraid(const std::string& value);
  std::string* _internal_mutable_cameraid();
  public:

  // string index = 3;
  void clear_index();
  const std::string& index() const;
  void set_index(const std::string& value);
  void set_index(std::string&& value);
  void set_index(const char* value);
  void set_index(const char* value, size_t size);
  std::string* mutable_index();
  std::string* release_index();
  void set_allocated_index(std::string* index);
  private:
  const std::string& _internal_index() const;
  void _internal_set_index(const std::string& value);
  std::string* _internal_mutable_index();
  public:

  // bytes picture = 5;
  void clear_picture();
  const std::string& picture() const;
  void set_picture(const std::string& value);
  void set_picture(std::string&& value);
  void set_picture(const char* value);
  void set_picture(const void* value, size_t size);
  std::string* mutable_picture();
  std::string* release_picture();
  void set_allocated_picture(std::string* picture);
  private:
  const std::string& _internal_picture() const;
  void _internal_set_picture(const std::string& value);
  std::string* _internal_mutable_picture();
  public:

  // string refer = 9;
  void clear_refer();
  const std::string& refer() const;
  void set_refer(const std::string& value);
  void set_refer(std::string&& value);
  void set_refer(const char* value);
  void set_refer(const char* value, size_t size);
  std::string* mutable_refer();
  std::string* release_refer();
  void set_allocated_refer(std::string* refer);
  private:
  const std::string& _internal_refer() const;
  void _internal_set_refer(const std::string& value);
  std::string* _internal_mutable_refer();
  public:

  // bool succeed = 1;
  void clear_succeed();
  bool succeed() const;
  void set_succeed(bool value);
  private:
  bool _internal_succeed() const;
  void _internal_set_succeed(bool value);
  public:

  // int32 rows = 6;
  void clear_rows();
  ::PROTOBUF_NAMESPACE_ID::int32 rows() const;
  void set_rows(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rows() const;
  void _internal_set_rows(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint64 response_time = 4;
  void clear_response_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 response_time() const;
  void set_response_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_response_time() const;
  void _internal_set_response_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 size = 8;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 cols = 7;
  void clear_cols();
  ::PROTOBUF_NAMESPACE_ID::int32 cols() const;
  void set_cols(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cols() const;
  void _internal_set_cols(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SendImage.GetImageReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cameraid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr picture_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr refer_;
  bool succeed_;
  ::PROTOBUF_NAMESPACE_ID::int32 rows_;
  ::PROTOBUF_NAMESPACE_ID::uint64 response_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  ::PROTOBUF_NAMESPACE_ID::int32 cols_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_image_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetImageRequest

// string cameraid = 1;
inline void GetImageRequest::clear_cameraid() {
  cameraid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetImageRequest::cameraid() const {
  // @@protoc_insertion_point(field_get:SendImage.GetImageRequest.cameraid)
  return _internal_cameraid();
}
inline void GetImageRequest::set_cameraid(const std::string& value) {
  _internal_set_cameraid(value);
  // @@protoc_insertion_point(field_set:SendImage.GetImageRequest.cameraid)
}
inline std::string* GetImageRequest::mutable_cameraid() {
  // @@protoc_insertion_point(field_mutable:SendImage.GetImageRequest.cameraid)
  return _internal_mutable_cameraid();
}
inline const std::string& GetImageRequest::_internal_cameraid() const {
  return cameraid_.GetNoArena();
}
inline void GetImageRequest::_internal_set_cameraid(const std::string& value) {
  
  cameraid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetImageRequest::set_cameraid(std::string&& value) {
  
  cameraid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SendImage.GetImageRequest.cameraid)
}
inline void GetImageRequest::set_cameraid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cameraid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SendImage.GetImageRequest.cameraid)
}
inline void GetImageRequest::set_cameraid(const char* value, size_t size) {
  
  cameraid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SendImage.GetImageRequest.cameraid)
}
inline std::string* GetImageRequest::_internal_mutable_cameraid() {
  
  return cameraid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetImageRequest::release_cameraid() {
  // @@protoc_insertion_point(field_release:SendImage.GetImageRequest.cameraid)
  
  return cameraid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetImageRequest::set_allocated_cameraid(std::string* cameraid) {
  if (cameraid != nullptr) {
    
  } else {
    
  }
  cameraid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cameraid);
  // @@protoc_insertion_point(field_set_allocated:SendImage.GetImageRequest.cameraid)
}

// string lastindex = 2;
inline void GetImageRequest::clear_lastindex() {
  lastindex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetImageRequest::lastindex() const {
  // @@protoc_insertion_point(field_get:SendImage.GetImageRequest.lastindex)
  return _internal_lastindex();
}
inline void GetImageRequest::set_lastindex(const std::string& value) {
  _internal_set_lastindex(value);
  // @@protoc_insertion_point(field_set:SendImage.GetImageRequest.lastindex)
}
inline std::string* GetImageRequest::mutable_lastindex() {
  // @@protoc_insertion_point(field_mutable:SendImage.GetImageRequest.lastindex)
  return _internal_mutable_lastindex();
}
inline const std::string& GetImageRequest::_internal_lastindex() const {
  return lastindex_.GetNoArena();
}
inline void GetImageRequest::_internal_set_lastindex(const std::string& value) {
  
  lastindex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetImageRequest::set_lastindex(std::string&& value) {
  
  lastindex_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SendImage.GetImageRequest.lastindex)
}
inline void GetImageRequest::set_lastindex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lastindex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SendImage.GetImageRequest.lastindex)
}
inline void GetImageRequest::set_lastindex(const char* value, size_t size) {
  
  lastindex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SendImage.GetImageRequest.lastindex)
}
inline std::string* GetImageRequest::_internal_mutable_lastindex() {
  
  return lastindex_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetImageRequest::release_lastindex() {
  // @@protoc_insertion_point(field_release:SendImage.GetImageRequest.lastindex)
  
  return lastindex_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetImageRequest::set_allocated_lastindex(std::string* lastindex) {
  if (lastindex != nullptr) {
    
  } else {
    
  }
  lastindex_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lastindex);
  // @@protoc_insertion_point(field_set_allocated:SendImage.GetImageRequest.lastindex)
}

// uint64 request_time = 3;
inline void GetImageRequest::clear_request_time() {
  request_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetImageRequest::_internal_request_time() const {
  return request_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetImageRequest::request_time() const {
  // @@protoc_insertion_point(field_get:SendImage.GetImageRequest.request_time)
  return _internal_request_time();
}
inline void GetImageRequest::_internal_set_request_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  request_time_ = value;
}
inline void GetImageRequest::set_request_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_request_time(value);
  // @@protoc_insertion_point(field_set:SendImage.GetImageRequest.request_time)
}

// .SendImage.GetImageRequest.type responsetype = 4;
inline void GetImageRequest::clear_responsetype() {
  responsetype_ = 0;
}
inline ::SendImage::GetImageRequest_type GetImageRequest::_internal_responsetype() const {
  return static_cast< ::SendImage::GetImageRequest_type >(responsetype_);
}
inline ::SendImage::GetImageRequest_type GetImageRequest::responsetype() const {
  // @@protoc_insertion_point(field_get:SendImage.GetImageRequest.responsetype)
  return _internal_responsetype();
}
inline void GetImageRequest::_internal_set_responsetype(::SendImage::GetImageRequest_type value) {
  
  responsetype_ = value;
}
inline void GetImageRequest::set_responsetype(::SendImage::GetImageRequest_type value) {
  _internal_set_responsetype(value);
  // @@protoc_insertion_point(field_set:SendImage.GetImageRequest.responsetype)
}

// -------------------------------------------------------------------

// GetImageReply

// bool succeed = 1;
inline void GetImageReply::clear_succeed() {
  succeed_ = false;
}
inline bool GetImageReply::_internal_succeed() const {
  return succeed_;
}
inline bool GetImageReply::succeed() const {
  // @@protoc_insertion_point(field_get:SendImage.GetImageReply.succeed)
  return _internal_succeed();
}
inline void GetImageReply::_internal_set_succeed(bool value) {
  
  succeed_ = value;
}
inline void GetImageReply::set_succeed(bool value) {
  _internal_set_succeed(value);
  // @@protoc_insertion_point(field_set:SendImage.GetImageReply.succeed)
}

// string cameraid = 2;
inline void GetImageReply::clear_cameraid() {
  cameraid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetImageReply::cameraid() const {
  // @@protoc_insertion_point(field_get:SendImage.GetImageReply.cameraid)
  return _internal_cameraid();
}
inline void GetImageReply::set_cameraid(const std::string& value) {
  _internal_set_cameraid(value);
  // @@protoc_insertion_point(field_set:SendImage.GetImageReply.cameraid)
}
inline std::string* GetImageReply::mutable_cameraid() {
  // @@protoc_insertion_point(field_mutable:SendImage.GetImageReply.cameraid)
  return _internal_mutable_cameraid();
}
inline const std::string& GetImageReply::_internal_cameraid() const {
  return cameraid_.GetNoArena();
}
inline void GetImageReply::_internal_set_cameraid(const std::string& value) {
  
  cameraid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetImageReply::set_cameraid(std::string&& value) {
  
  cameraid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SendImage.GetImageReply.cameraid)
}
inline void GetImageReply::set_cameraid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cameraid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SendImage.GetImageReply.cameraid)
}
inline void GetImageReply::set_cameraid(const char* value, size_t size) {
  
  cameraid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SendImage.GetImageReply.cameraid)
}
inline std::string* GetImageReply::_internal_mutable_cameraid() {
  
  return cameraid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetImageReply::release_cameraid() {
  // @@protoc_insertion_point(field_release:SendImage.GetImageReply.cameraid)
  
  return cameraid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetImageReply::set_allocated_cameraid(std::string* cameraid) {
  if (cameraid != nullptr) {
    
  } else {
    
  }
  cameraid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cameraid);
  // @@protoc_insertion_point(field_set_allocated:SendImage.GetImageReply.cameraid)
}

// string index = 3;
inline void GetImageReply::clear_index() {
  index_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetImageReply::index() const {
  // @@protoc_insertion_point(field_get:SendImage.GetImageReply.index)
  return _internal_index();
}
inline void GetImageReply::set_index(const std::string& value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:SendImage.GetImageReply.index)
}
inline std::string* GetImageReply::mutable_index() {
  // @@protoc_insertion_point(field_mutable:SendImage.GetImageReply.index)
  return _internal_mutable_index();
}
inline const std::string& GetImageReply::_internal_index() const {
  return index_.GetNoArena();
}
inline void GetImageReply::_internal_set_index(const std::string& value) {
  
  index_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetImageReply::set_index(std::string&& value) {
  
  index_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SendImage.GetImageReply.index)
}
inline void GetImageReply::set_index(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  index_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SendImage.GetImageReply.index)
}
inline void GetImageReply::set_index(const char* value, size_t size) {
  
  index_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SendImage.GetImageReply.index)
}
inline std::string* GetImageReply::_internal_mutable_index() {
  
  return index_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetImageReply::release_index() {
  // @@protoc_insertion_point(field_release:SendImage.GetImageReply.index)
  
  return index_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetImageReply::set_allocated_index(std::string* index) {
  if (index != nullptr) {
    
  } else {
    
  }
  index_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index);
  // @@protoc_insertion_point(field_set_allocated:SendImage.GetImageReply.index)
}

// uint64 response_time = 4;
inline void GetImageReply::clear_response_time() {
  response_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetImageReply::_internal_response_time() const {
  return response_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetImageReply::response_time() const {
  // @@protoc_insertion_point(field_get:SendImage.GetImageReply.response_time)
  return _internal_response_time();
}
inline void GetImageReply::_internal_set_response_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  response_time_ = value;
}
inline void GetImageReply::set_response_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_response_time(value);
  // @@protoc_insertion_point(field_set:SendImage.GetImageReply.response_time)
}

// bytes picture = 5;
inline void GetImageReply::clear_picture() {
  picture_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetImageReply::picture() const {
  // @@protoc_insertion_point(field_get:SendImage.GetImageReply.picture)
  return _internal_picture();
}
inline void GetImageReply::set_picture(const std::string& value) {
  _internal_set_picture(value);
  // @@protoc_insertion_point(field_set:SendImage.GetImageReply.picture)
}
inline std::string* GetImageReply::mutable_picture() {
  // @@protoc_insertion_point(field_mutable:SendImage.GetImageReply.picture)
  return _internal_mutable_picture();
}
inline const std::string& GetImageReply::_internal_picture() const {
  return picture_.GetNoArena();
}
inline void GetImageReply::_internal_set_picture(const std::string& value) {
  
  picture_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetImageReply::set_picture(std::string&& value) {
  
  picture_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SendImage.GetImageReply.picture)
}
inline void GetImageReply::set_picture(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  picture_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SendImage.GetImageReply.picture)
}
inline void GetImageReply::set_picture(const void* value, size_t size) {
  
  picture_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SendImage.GetImageReply.picture)
}
inline std::string* GetImageReply::_internal_mutable_picture() {
  
  return picture_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetImageReply::release_picture() {
  // @@protoc_insertion_point(field_release:SendImage.GetImageReply.picture)
  
  return picture_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetImageReply::set_allocated_picture(std::string* picture) {
  if (picture != nullptr) {
    
  } else {
    
  }
  picture_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), picture);
  // @@protoc_insertion_point(field_set_allocated:SendImage.GetImageReply.picture)
}

// int32 rows = 6;
inline void GetImageReply::clear_rows() {
  rows_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetImageReply::_internal_rows() const {
  return rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetImageReply::rows() const {
  // @@protoc_insertion_point(field_get:SendImage.GetImageReply.rows)
  return _internal_rows();
}
inline void GetImageReply::_internal_set_rows(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rows_ = value;
}
inline void GetImageReply::set_rows(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rows(value);
  // @@protoc_insertion_point(field_set:SendImage.GetImageReply.rows)
}

// int32 cols = 7;
inline void GetImageReply::clear_cols() {
  cols_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetImageReply::_internal_cols() const {
  return cols_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetImageReply::cols() const {
  // @@protoc_insertion_point(field_get:SendImage.GetImageReply.cols)
  return _internal_cols();
}
inline void GetImageReply::_internal_set_cols(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cols_ = value;
}
inline void GetImageReply::set_cols(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cols(value);
  // @@protoc_insertion_point(field_set:SendImage.GetImageReply.cols)
}

// int64 size = 8;
inline void GetImageReply::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetImageReply::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetImageReply::size() const {
  // @@protoc_insertion_point(field_get:SendImage.GetImageReply.size)
  return _internal_size();
}
inline void GetImageReply::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void GetImageReply::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:SendImage.GetImageReply.size)
}

// string refer = 9;
inline void GetImageReply::clear_refer() {
  refer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetImageReply::refer() const {
  // @@protoc_insertion_point(field_get:SendImage.GetImageReply.refer)
  return _internal_refer();
}
inline void GetImageReply::set_refer(const std::string& value) {
  _internal_set_refer(value);
  // @@protoc_insertion_point(field_set:SendImage.GetImageReply.refer)
}
inline std::string* GetImageReply::mutable_refer() {
  // @@protoc_insertion_point(field_mutable:SendImage.GetImageReply.refer)
  return _internal_mutable_refer();
}
inline const std::string& GetImageReply::_internal_refer() const {
  return refer_.GetNoArena();
}
inline void GetImageReply::_internal_set_refer(const std::string& value) {
  
  refer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetImageReply::set_refer(std::string&& value) {
  
  refer_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SendImage.GetImageReply.refer)
}
inline void GetImageReply::set_refer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  refer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SendImage.GetImageReply.refer)
}
inline void GetImageReply::set_refer(const char* value, size_t size) {
  
  refer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SendImage.GetImageReply.refer)
}
inline std::string* GetImageReply::_internal_mutable_refer() {
  
  return refer_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetImageReply::release_refer() {
  // @@protoc_insertion_point(field_release:SendImage.GetImageReply.refer)
  
  return refer_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetImageReply::set_allocated_refer(std::string* refer) {
  if (refer != nullptr) {
    
  } else {
    
  }
  refer_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), refer);
  // @@protoc_insertion_point(field_set_allocated:SendImage.GetImageReply.refer)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SendImage

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::SendImage::GetImageRequest_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SendImage::GetImageRequest_type>() {
  return ::SendImage::GetImageRequest_type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_image_2eproto
